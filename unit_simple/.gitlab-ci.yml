lint:unit_simple:
  stage: lint
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - when: always
  variables:
    PYTHONPATH: .
  script:
    - cd unit_simple
    - conda env create --force --file environment.yml
    # install tool
    - conda install -y pylint
    # install deps for pylint to find
    - conda install -y pytest
    - conda list
    - pip install .
    - pylint --rcfile=../pylintrc src
    - pylint --rcfile=../pylintrc demo.py
    - pylint --rcfile=../pylintrc test/test.py
    - pylint --rcfile=../pylintrc test/unit_simple_test.py
    - pylint --rcfile=../pylintrc test/unit_simple_operator_test.py

test:unit_simple:
  stage: test
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - when: always
  variables:
    PYTHONPATH: unit_simple
  script:
    - cd unit_simple
    - conda env create --force --file environment.yml
    - conda install -y pytest-cov
    - pip install .
    - cd ..
    - pytest --cov=unit_simple --junitxml=unit_simple/report.xml --cov-append unit_simple
    - python unit_simple/test/test.py
  artifacts:
    when: always
    paths:
      - .coverage
      - unit_simple/report.xml
    reports:
      junit: unit_simple/report.xml
    expire_in: 2 days

demo:unit_simple:
  stage: demo
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - when: always
  script:
    - cd unit_simple
    - conda env create --force --file environment.yml
    - pip install .
    - python demo.py

pypi-package:unit_simple:pypi:
  stage: pypi-package
  rules:
    - if: $CI_COMMIT_TAG =~ /^unit_simple-/
      when: always
    - if: $CI_COMMIT_TAG
      when: never
    - when: always
  script:
    - cd unit_simple
    - conda env create --force --file environment.yml
    - rm -rf dist/
    - sed -i "s#version\ =\ .*\$#version\ =\ \"$UNIT_SIMPLE_VERSION\"#g" pyproject.toml
    - cat pyproject.toml
    - cp ../LICENSE.md .
    - pip install .
    - conda install -y build
    - python -m build
    - ls -l $DIST_DIR
    - conda uninstall -y build
  artifacts:
    paths:
      - unit_simple/dist/*

pypi-publish:unit_simple:test_pypi:
  stage: pypi-publish
  rules:
    - if: $CI_COMMIT_TAG =~ /^unit_simple-/
      when: manual
    - when: never
  dependencies:
    - pypi-package:unit_simple:pypi
  when: manual
  script:
    - cd unit_simple
    - conda env create --force --file environment.yml
    - conda install -y --update-deps twine
    - python -m twine upload --repository testpypi -u $TEST_PYPI_USERNAME -p $TEST_PYPI_PASSWORD dist/*
    - conda uninstall -y twine
  environment:
    name: test pypi simple unit
    url: https://test.pypi.org/project/unit-simple/

pypi-publish:unit_simple:pypi:
  stage: pypi-publish
  rules:
    - if: $CI_COMMIT_TAG =~ /^unit_simple-/
      when: manual
    - when: never
  dependencies:
    - pypi-package:unit_simple:pypi
  when: manual
  script:
    - cd unit_simple
    - conda env create --force --file environment.yml
    - conda install -y --update-deps twine
    - python -m twine upload -u $PYPI_USERNAME -p $PYPI_PASSWORD dist/*
    - conda uninstall -y twine
  environment:
    name: pypi simple unit
    url: https://pypi.org/project/unit-simple/

conda-package:unit_simple:
  stage: conda-package
  rules:
    - if: $CI_COMMIT_TAG =~ /^unit_simple-/
      when: manual
    - when: never
  variables:
    DIST_DIR: conda_dist
    PACKAGE: unit_simple
    VERSION: $UNIT_SIMPLE_VERSION
  when: manual
  script:
    - cd unit_simple
    - conda env create --force --file environment.yml
    - rm -rf $DIST_DIR/
    - mkdir $DIST_DIR
    - conda install -c conda-forge grayskull
    - grayskull pypi -o $DIST_DIR $PACKAGE
    - conda build $DIST_DIR/$PACKAGE
    - anaconda logout
    - anaconda login --username $CONDA_USERNAME --password $CONDA_PASSWORD
    - anaconda upload $CONDA_HOME/conda-bld/noarch/$PACKAGE-$VERSION-py_0.tar.bz2
    - anaconda logout
  artifacts:
    paths:
      - unit_simple/$DIST_DIR/*
  environment:
    name: anaconda simple unit
    url: https://anaconda.org/cosmoloj/unit_simple/

mkdocs:unit_simple:
  stage: lint
  script:
    - cd unit_simple
    - conda install -c conda-forge mkdocs
    - mkdocs build
    - mv site unit_simple
    - zip unit_simple.zip unit_simple/
    - scp unit_simple.zip $MKDOCS_SERVER_USER@$MKDOCS_SERVER_HOST:$MKDOCS_SERVER_PATH
    - ssh $MKDOCS_SERVER_USER@$MKDOCS_SERVER_HOST "cd $MKDOCS_SERVER_PATH ; rm unit_simple* ; unzip unit_simple.zip ; rm unit_simple.zip"