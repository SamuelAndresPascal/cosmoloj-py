"""test module for EPSG 1027 projections"""
from math import radians, degrees

import pytest

import numpy as np

from coord_operation.projection.epsg import Epsg1027
from coord_operation.surface import Spheroid


@pytest.fixture(name="epsg_1027")
def epsg_1027_fixture() -> Epsg1027:
    """test fixture for EPSG::1027 tests"""
    return Epsg1027(Spheroid.unit(), phi0=0., lambda0=0., fe=0., fn=0.)


RESULTS = [
    [[0., 1.41421], [0., 1.41421], [0., 1.41421], [0., 1.41421], [0., 1.41421],
     [0., 1.41421], [0., 1.41421], [0., 1.41421], [0., 1.41421], [0., 1.41421]],
    [[0., 1.28558], [0.03941, 1.28702], [0.07788, 1.29135], [0.11448, 1.29851], [0.14830, 1.30842],
     [0.17843, 1.32096], [0.20400, 1.33594], [0.22420, 1.35313], [0.23828, 1.37219], [0.24558, 1.39273]],
    [[0., 1.14715], [0.07264, 1.14938], [0.14391, 1.15607], [0.21242, 1.16725], [0.27676, 1.18296],
     [0.33548, 1.20323], [0.38709, 1.22806], [0.43006, 1.25741], [0.46280, 1.29114], [0.48369, 1.32893]],
    [[0., 1.00000], [0.10051, 1.00254], [0.19948, 1.01021], [0.29535, 1.02311], [0.38649, 1.04143],
     [0.47122, 1.06544], [0.54772, 1.09545], [0.61403, 1.13179], [0.66797, 1.17481], [0.70711, 1.22474]],
    [[0., 0.84524], [0.12353, 0.84776], [0.24549, 0.85539], [0.36430, 0.86830], [0.47831, 0.88680],
     [0.58579, 0.91132], [0.68485, 0.94244], [0.77342, 0.98088], [0.84909, 1.02752], [0.90904, 1.08335]],
    [[0., 0.68404], [0.14203, 0.68631], [0.28254, 0.69317], [0.41999, 0.70483], [0.55281, 0.72164],
     [0.67933, 0.74411], [0.79778, 0.77298], [0.90620, 0.80919], [1.00231, 0.85401], [1.08335, 0.90904]],
    [[0., 0.51764], [0.15624, 0.51947], [0.31103, 0.52504], [0.46291, 0.53452], [0.61040, 0.54826],
     [0.75197, 0.56674], [0.88604, 0.59069], [1.01087, 0.62108], [1.12454, 0.65927], [1.22474, 0.70711]],
    [[0., 0.34730], [0.16631, 0.34858], [0.33123, 0.35248], [0.49337, 0.35915], [0.65136, 0.36883],
     [0.80380, 0.38191], [0.94928, 0.39896], [1.08635, 0.42078], [1.21347, 0.44848], [1.32893, 0.48369]],
    [[0., 0.17431], [0.17231, 0.17497], [0.34329, 0.17698], [0.51158, 0.18041], [0.67588, 0.18540],
     [0.83488, 0.19217], [0.98731, 0.20102], [1.13192, 0.21240], [1.26747, 0.22694], [1.39273, 0.24558]],
    [[0., 0.00000], [0.17431, 0.00000], [0.34730, 0.00000], [0.51764, 0.00000], [0.68404, 0.00000],
     [0.84524, 0.], [1.00000, 0.], [1.14715, 0.], [1.28558, 0.], [1.41421, 0.]]
]


def test_forward(epsg_1027):
    """forward test"""

    for i, result_i in enumerate(RESULTS):
        for j, result_ij in enumerate(result_i):
            assert (epsg_1027([radians(90. - 10. * i), radians(10. * j)])
                    == pytest.approx(expected=result_ij, rel=1e-4))
            assert (epsg_1027(np.array([radians(90. - 10. * i), radians(10. * j)]))
                    == pytest.approx(expected=result_ij, rel=1e-4))


def test_inverse(epsg_1027):
    """inverse test"""

    result = (~epsg_1027)(RESULTS[0][0])
    assert (degrees(result[0]), degrees(result[1])) == pytest.approx(expected=(90.0, 0.0), rel=1e-2)
    result = (~epsg_1027)(np.array(RESULTS[0][0]))
    assert (degrees(result[0]), degrees(result[1])) == pytest.approx(expected=(90.0, 0.0), rel=1e-2)

    for i in range(1, len(RESULTS)):
        for j, result_ij in enumerate(RESULTS[i]):
            result = (~epsg_1027)(result_ij)
            assert ((degrees(result[0]), degrees(result[1]))
                    == pytest.approx(expected=(90.0 - 10.0 * i, 10.0 * j), rel=1e-2))
            result = (~epsg_1027)(np.array(result_ij))
            assert ((degrees(result[0]), degrees(result[1]))
                    == pytest.approx(expected=(90.0 - 10.0 * i, 10.0 * j), rel=1e-2))
